#!/usr/bin/env bash

# Setup log file
LOG_FILE=~/Desktop/dotfiles-install.log
exec > >(tee -a "$LOG_FILE")
exec 2>&1

# Log header
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "Dotfiles Installation Log"
echo "Date: $(date)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Set up paths for UI library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CORE_DIR="$SCRIPT_DIR"
UI_LIB="$CORE_DIR/lib/ui.sh"

# Source UI library if available (after bootstrap creates it)
if [[ -f "$UI_LIB" ]]; then
    source "$UI_LIB"
else
    # Fallback functions for initial setup before UI library exists
    info() { echo "› $*"; }
    success() { echo "✓ $*"; }
    warning() { echo "⚠ $*"; }
    error() { echo "✗ $*" >&2; }
    progress() { echo "⟳ $*"; }
    header() { echo ""; echo "$*"; echo "────────────────────────────────────────────────────────────"; }
    subheader() { echo ""; echo "$*"; }
    blank() { echo ""; }
fi

# Cancel function
cancel_install() {
    blank
    error "Installation cancelled"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Installation cancelled at: $(date)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    exit 0
}

# Set non-interactive mode for Homebrew
export NONINTERACTIVE=1

# Authentication first
header "🔐 Microdots Installation"
info "Homebrew and system configuration requires administrator access."
info "Please enter your password to continue:"
sudo -v
if [ $? -ne 0 ]; then
    error "Authentication failed or cancelled"
    exit 1
fi

# Keep sudo alive in background
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
SUDO_PID=$!

success "Authentication successful"
blank

# Parse arguments for custom path
CUSTOM_PATH=""

# When run via bash -c "$(curl ...)", there are no real arguments
# The script itself becomes $0 and there's no $1
# Only use $1 if it exists and doesn't look like script content
if [ -n "$1" ] && [[ ! "$1" =~ ^#!.*bash ]] && [[ ${#1} -lt 100 ]]; then
    # It's a custom path
    CUSTOM_PATH="$1"
fi

# Now ask for local path
if [ -n "$CUSTOM_PATH" ]; then
    DOTLOCAL="$CUSTOM_PATH"
    info "Using provided path: $DOTLOCAL"
    LOCAL_LINE="DOTLOCAL=\"$DOTLOCAL\""
    blank
else
    # Local configuration header
    header "📁 Local Configuration Path"
    info "[1] ~/.dotlocal (default)"
    info "[2] No local configurations"
    info "[3] Custom path"
    info "[C] Cancel installation"
    echo -n "Choice [1]: "
    read -r response
    
    case "$response" in
        [Cc])
            [[ -n "$SUDO_PID" ]] && { kill -9 $SUDO_PID 2>/dev/null || true; }
            cancel_install
            ;;
        2)
            DOTLOCAL=""
            LOCAL_LINE="# DOTLOCAL=\"\$HOME/.dotlocal\""
            warning "Local configurations disabled"
            blank
            ;;
        3)
            echo -n "Enter custom path: "
            read -r custom_path
            if [[ -z "$custom_path" || "$custom_path" == "cancel" ]]; then
                [[ -n "$SUDO_PID" ]] && { kill -9 $SUDO_PID 2>/dev/null || true; }
                cancel_install
            fi
            DOTLOCAL="$custom_path"
            LOCAL_LINE="DOTLOCAL=\"$custom_path\""
            success "Using custom path: $custom_path"
            blank
            ;;
        1|"")
            DOTLOCAL="~/.dotlocal"
            LOCAL_LINE="DOTLOCAL=\"\$HOME/.dotlocal\""
            success "Using default: ~/.dotlocal"
            blank
            ;;
        *)
            DOTLOCAL="~/.dotlocal"
            LOCAL_LINE="DOTLOCAL=\"\$HOME/.dotlocal\""
            success "Using default: ~/.dotlocal"
            blank
            ;;
    esac
fi

# GitHub configuration collection
header "🔧 GitHub Configuration"
echo -n "Enter your GitHub author name: "
read -r git_authorname
echo -n "Enter your GitHub author email: "
read -r git_authoremail
success "GitHub information collected"
blank

progress "Starting installation..."
blank

# Clone the microdots repository to ~/.dotfiles
subheader "🔄 Cloning microdots repository"
git clone https://github.com/moquette/microdots.git ~/.dotfiles
if [ $? -ne 0 ]; then
    [[ -n "$SUDO_PID" ]] && { kill -9 $SUDO_PID 2>/dev/null || true; }
    error "Failed to clone repository"
    exit 1
fi
success "Repository cloned successfully"
blank

# Write the configuration to ~/.dotfiles/dotfiles.conf
subheader "📝 Writing configuration file"
cat > ~/.dotfiles/dotfiles.conf << EOF
# Dotfiles Configuration
# This file specifies where your private/local configurations are stored
#
# ⚠️  IMPORTANT VALIDATION RULES:
# - Only use ONE method (multiple LOCAL_PATH lines will cause an error)
# - Only set VARIABLES (no commands like 'ln -s' or 'mkdir')
# - Comments must start with # (uncommented commands will block operations)
#
# See dotfiles.conf.example for all available options and detailed documentation
# Local configuration directory
$LOCAL_LINE
EOF
success "Configuration written to ~/.dotfiles/dotfiles.conf"
blank

# Pre-stage GitHub configuration
subheader "📝 Pre-staging GitHub configuration"

# Determine credential helper based on OS
git_credential='cache'
if [[ "$(uname -s)" == "Darwin" ]]; then
  git_credential='osxkeychain'
fi

# Use the existing template to create the gitconfig
if [ -f ~/.dotfiles/git/gitconfig.local.symlink.example ]; then
  sed -e "s/AUTHORNAME/$git_authorname/g" \
      -e "s/AUTHOREMAIL/$git_authoremail/g" \
      -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
      ~/.dotfiles/git/gitconfig.local.symlink.example > \
      ~/.dotfiles/git/gitconfig.local.symlink
  success "GitHub configuration pre-staged successfully"
  info "   Name: $git_authorname"
  info "   Email: $git_authoremail"
  blank
else
  warning "Template not found, bootstrap will prompt for GitHub info"
  blank
fi

# Standard bootstrap only (provision mode removed)
subheader "🚀 Bootstrapping dotfiles installation"
blank

# Run bootstrap with install flag - show all output
if ! ~/.dotfiles/core/dots bootstrap --install; then
  blank
  warning "Bootstrap completed with warnings"
  warning "Some components may not have installed properly"
  warning "You can run 'dots install' later to retry"
fi

# Kill the sudo keep-alive background process quietly
if [[ -n "$SUDO_PID" ]]; then
  kill -9 $SUDO_PID 2>/dev/null || true
  wait $SUDO_PID 2>/dev/null || true
fi

# Final message
blank
header "✅ Bootstrap complete!"
blank
echo -n "Complete the setup automatically? [Y/n]: "
read -r auto_provision

case "${auto_provision,,}" in
  n|no)
    blank
    subheader "Manual next steps"
    info "  1. Restart your terminal or run: source ~/.zshrc"
    info "  2. Run: dots provision"
    ;;
  *)
    blank
    progress "Completing setup automatically..."
    blank

    # Source the new shell configuration
    if source ~/.zshrc 2>/dev/null; then
      success "Shell configuration loaded"

      # Run provision
      if ~/.dotfiles/core/dots provision; then
        blank
        success "🎉 Setup completed successfully!"
        info "Your dotfiles are ready to use."
      else
        blank
        warning "Provision completed with warnings"
        info "Run 'dots provision' again to retry any failed steps"
      fi
    else
      warning "Could not auto-load shell config"
      info "Please restart your terminal and run: dots provision"
    fi
    ;;
esac

# Log footer (for the log file only)
{
  echo ""
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Installation completed at: $(date)"
  echo "Mode: Bootstrap and Install"
  if [ -n "$DOTLOCAL" ]; then
      echo "Local directory: $DOTLOCAL"
  else
      echo "Local directory: DISABLED"
  fi
  echo "Log saved to: $LOG_FILE"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
} >> "$LOG_FILE" 2>&1