#!/usr/bin/env bash

# Setup log file
LOG_FILE=~/Desktop/dotfiles-install.log
exec > >(tee -a "$LOG_FILE")
exec 2>&1

# Log header
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "Dotfiles Installation Log"
echo "Date: $(date)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Colors for output (only for terminal, not log)
if [ -t 1 ]; then
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    YELLOW='\033[1;33m'
    CYAN='\033[0;36m'
    RED='\033[0;31m'
    NC='\033[0m'
else
    GREEN=''
    BLUE=''
    YELLOW=''
    CYAN=''
    RED=''
    NC=''
fi

# Cancel function
cancel_install() {
    echo -e "\n${RED}❌ Installation cancelled${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Installation cancelled at: $(date)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    exit 0
}

# Set non-interactive mode for Homebrew
export NONINTERACTIVE=1

# Authentication first
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${YELLOW}🔐 Microdots Installation${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${CYAN}Homebrew and system configuration requires administrator access.${NC}"
echo -e "${CYAN}Please enter your password to continue:${NC}"
sudo -v
if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Authentication failed or cancelled${NC}"
    exit 1
fi

# Keep sudo alive in background
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
SUDO_PID=$!

echo -e "${GREEN}✅ Authentication successful${NC}\n"

# Parse arguments for --provision flag
PROVISION_MODE=false
CUSTOM_PATH=""

# When run via bash -c "$(curl ...)", there are no real arguments
# The script itself becomes $0 and there's no $1
# Only use $1 if it exists and doesn't look like script content
if [ -n "$1" ] && [[ ! "$1" =~ ^#!.*bash ]] && [[ ${#1} -lt 100 ]]; then
    # Check if it's the --provision flag
    if [[ "$1" == "--provision" ]]; then
        PROVISION_MODE=true
        shift  # Remove the flag, check for path argument
        if [ -n "$1" ] && [[ ! "$1" =~ ^#!.*bash ]] && [[ ${#1} -lt 100 ]]; then
            CUSTOM_PATH="$1"
        fi
    else
        # It's a custom path
        CUSTOM_PATH="$1"
    fi
fi

# Now ask for local path
if [ -n "$CUSTOM_PATH" ]; then
    DOTLOCAL="$CUSTOM_PATH"
    echo -e "${YELLOW}📍 Using provided path: $DOTLOCAL${NC}\n"
    LOCAL_LINE="DOTLOCAL=\"$DOTLOCAL\""
else
    # Local configuration header
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}📁 Local Configuration Path${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}[1] ~/.dotlocal (default)${NC}"
    echo -e "${CYAN}[2] No local configurations${NC}"
    echo -e "${CYAN}[3] Custom path${NC}"
    echo -e "${CYAN}[C] Cancel installation${NC}"
    echo -e "${CYAN}Choice [1]: ${NC}\c"
    read -r response
    
    case "$response" in
        [Cc])
            kill $SUDO_PID 2>/dev/null
            cancel_install
            ;;
        2)
            DOTLOCAL=""
            LOCAL_LINE="# DOTLOCAL=\"\$HOME/.dotlocal\""
            echo -e "${YELLOW}⚠ Local configurations disabled${NC}\n"
            ;;
        3)
            echo -e "${CYAN}Enter custom path: ${NC}\c"
            read -r custom_path
            if [[ -z "$custom_path" || "$custom_path" == "cancel" ]]; then
                kill $SUDO_PID 2>/dev/null
                cancel_install
            fi
            DOTLOCAL="$custom_path"
            LOCAL_LINE="DOTLOCAL=\"$custom_path\""
            echo -e "${GREEN}✓ Using custom path: $custom_path${NC}\n"
            ;;
        1|"")
            DOTLOCAL="~/.dotlocal"
            LOCAL_LINE="DOTLOCAL=\"\$HOME/.dotlocal\""
            echo -e "${GREEN}✓ Using default: ~/.dotlocal${NC}\n"
            ;;
        *)
            DOTLOCAL="~/.dotlocal"
            LOCAL_LINE="DOTLOCAL=\"\$HOME/.dotlocal\""
            echo -e "${GREEN}✓ Using default: ~/.dotlocal${NC}\n"
            ;;
    esac
fi

# GitHub configuration collection
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${YELLOW}🔧 GitHub Configuration${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${CYAN}Enter your GitHub author name: ${NC}\c"
read -r git_authorname
echo -e "${CYAN}Enter your GitHub author email: ${NC}\c"
read -r git_authoremail
echo -e "${GREEN}✓ GitHub information collected${NC}\n"

echo -e "${YELLOW}Starting installation...${NC}\n"

# Clone the microdots repository to ~/.dotfiles
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${YELLOW}🔄 Cloning microdots repository...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
git clone https://github.com/moquette/microdots.git ~/.dotfiles
if [ $? -ne 0 ]; then
    kill $SUDO_PID 2>/dev/null
    echo -e "${RED}❌ Failed to clone repository${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Repository cloned successfully!${NC}\n"

# Write the configuration to ~/.dotfiles/dotfiles.conf
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${YELLOW}📝 Writing configuration file...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
cat > ~/.dotfiles/dotfiles.conf << EOF
# Dotfiles Configuration
# This file specifies where your private/local configurations are stored
#
# ⚠️  IMPORTANT VALIDATION RULES:
# - Only use ONE method (multiple LOCAL_PATH lines will cause an error)
# - Only set VARIABLES (no commands like 'ln -s' or 'mkdir')
# - Comments must start with # (uncommented commands will block operations)
#
# See dotfiles.conf.example for all available options and detailed documentation
# Local configuration directory
$LOCAL_LINE
EOF
echo -e "${GREEN}✅ Configuration written to ~/.dotfiles/dotfiles.conf${NC}\n"

# Pre-stage GitHub configuration
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${YELLOW}📝 Pre-staging GitHub configuration...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

# Determine credential helper based on OS
git_credential='cache'
if [[ "$(uname -s)" == "Darwin" ]]; then
  git_credential='osxkeychain'
fi

# Use the existing template to create the gitconfig
if [ -f ~/.dotfiles/git/gitconfig.local.symlink.example ]; then
  sed -e "s/AUTHORNAME/$git_authorname/g" \
      -e "s/AUTHOREMAIL/$git_authoremail/g" \
      -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
      ~/.dotfiles/git/gitconfig.local.symlink.example > \
      ~/.dotfiles/git/gitconfig.local.symlink
  echo -e "${GREEN}✅ GitHub configuration pre-staged successfully${NC}"
  echo -e "${CYAN}   Name: $git_authorname${NC}"
  echo -e "${CYAN}   Email: $git_authoremail${NC}\n"
else
  echo -e "${YELLOW}⚠ Template not found, bootstrap will prompt for GitHub info${NC}\n"
fi

# Check if we're in provision mode
if [[ "$PROVISION_MODE" == "true" ]]; then
    # Full system provisioning
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}🚀 System Provisioning${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}This will perform complete system setup:${NC}"
    echo -e "${CYAN}  • Bootstrap core configuration${NC}"
    echo -e "${CYAN}  • Install all tools and dependencies${NC}"
    echo -e "${CYAN}  • Run system maintenance${NC}"
    echo -e "${CYAN}  • Restart shell environment${NC}"
    echo ""

    # Step 1: Bootstrap with install
    echo -e "${YELLOW}📦 Step 1/3: Bootstrap & Installation...${NC}"
    if ! ~/.dotfiles/core/dots bootstrap --install; then
        echo -e "\n${YELLOW}⚠ Bootstrap completed with warnings${NC}"
        echo -e "${YELLOW}  Some components may not have installed properly${NC}"
        echo -e "${YELLOW}  Skipping maintenance due to bootstrap issues${NC}"
    else
        echo -e "${GREEN}✅ Bootstrap and installation successful${NC}\n"

        # Step 2: Run maintenance
        echo -e "${YELLOW}🔧 Step 2/3: System Maintenance...${NC}"
        if ~/.dotfiles/core/dots maintenance; then
            echo -e "${GREEN}✅ System maintenance completed${NC}\n"
        else
            echo -e "${YELLOW}⚠ Maintenance completed with warnings${NC}\n"
        fi

        # Step 3: Shell restart notification
        echo -e "${YELLOW}🔄 Step 3/3: Preparing shell restart...${NC}"
        echo -e "${GREEN}✅ All steps completed${NC}\n"
    fi
else
    # Standard bootstrap only
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}🚀 Bootstrapping dotfiles installation...${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""

    # Run bootstrap with install flag - show all output
    if ! ~/.dotfiles/core/dots bootstrap --install; then
      echo -e "\n${YELLOW}⚠ Bootstrap completed with warnings${NC}"
      echo -e "${YELLOW}  Some components may not have installed properly${NC}"
      echo -e "${YELLOW}  You can run 'dots install' later to retry${NC}"
    fi
fi

# Kill the sudo keep-alive background process quietly
{ kill $SUDO_PID; } 2>/dev/null

# Final message based on mode
echo ""
if [[ "$PROVISION_MODE" == "true" ]]; then
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✨ System Provisioning Complete!${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}Restarting shell to activate configuration...${NC}"
    sleep 2
    exec $SHELL
else
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✅ Please restart your terminal or run: source ~/.zshrc${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
fi

# Log footer (for the log file only)
{
  echo ""
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Installation completed at: $(date)"
  if [[ "$PROVISION_MODE" == "true" ]]; then
      echo "Mode: Full System Provisioning"
  else
      echo "Mode: Bootstrap Only"
  fi
  if [ -n "$DOTLOCAL" ]; then
      echo "Local directory: $DOTLOCAL"
  else
      echo "Local directory: DISABLED"
  fi
  echo "Log saved to: $LOG_FILE"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
} >> "$LOG_FILE" 2>&1