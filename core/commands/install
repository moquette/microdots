#!/usr/bin/env bash
#
# dots install - Install all topic configurations
# This discovers and runs all topic install.sh scripts
#

# Setup log file (only if not already logging from bootstrap/setup)
if [[ -z "${LOG_FILE:-}" ]]; then
  LOG_FILE=~/Desktop/dotfiles-install.log
  exec > >(tee -a "$LOG_FILE")
  exec 2>&1

  # Log header
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Dotfiles Install Log"
  echo "Date: $(date)"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""
fi

set -e

# Get the dotfiles root directory
DOTFILES_ROOT="$(cd "$(dirname "$0")/../.." && pwd -P)"
CORE_DIR="$DOTFILES_ROOT/core"

# Source common functions
source "$CORE_DIR/lib/common.sh"

# Parse command line flags
apps_only=false
while test $# -gt 0; do
  case "$1" in
    --apps)
      apps_only=true
      ;;
    *)
      ;;
  esac
  shift
done

if [[ "$apps_only" == "true" ]]; then
  header "📦 Installing from *.apps Brewfiles"
else
  header "📦 Dotfiles Installation"
fi

# Homebrew environment is managed by path.zsh - no manual injection needed
# Check if we're on macOS for Homebrew availability
if [[ "$(uname -s)" == "Darwin" ]]; then
  
  # Skip regular Brewfile processing if --apps flag is set
  if [[ "$apps_only" != "true" ]]; then
    # Check if brew is available
    if command -v brew >/dev/null 2>&1; then
      # Load DOTLOCAL configuration if not already loaded
      if [[ -z "$DOTLOCAL" ]] && [[ -f "$DOTFILES_ROOT/dotfiles.conf" ]]; then
        eval "$(grep '^DOTLOCAL=' "$DOTFILES_ROOT/dotfiles.conf" 2>/dev/null || true)"
      fi

      # Apply "local always wins" precedence for Brewfile
      brewfile_installed=false

      # First check for local Brewfile (takes precedence)
      if [[ -n "$DOTLOCAL" ]]; then
        DOTLOCAL_EXPANDED=$(expand_path "$DOTLOCAL")
        if [[ -f "$DOTLOCAL_EXPANDED/homebrew/Brewfile" ]]; then
          subheader "Local Homebrew Setup"
          progress "Installing from local Brewfile"
          info "Using: $DOTLOCAL_EXPANDED/homebrew/Brewfile"
          if brew bundle --file="$DOTLOCAL_EXPANDED/homebrew/Brewfile"; then
            success "Local Homebrew packages installed"
            brewfile_installed=true
          else
            warning "Some local Homebrew packages failed to install"
            brewfile_installed=true  # Still mark as attempted
          fi
          blank
        fi
      fi

      # If no local Brewfile, fall back to public one
      if [[ "$brewfile_installed" == "false" ]] && [[ -f "$DOTFILES_ROOT/homebrew/Brewfile" ]]; then
        subheader "Homebrew Setup"
        progress "Installing from public Brewfile"
        if brew bundle --file="$DOTFILES_ROOT/homebrew/Brewfile"; then
          success "Homebrew packages installed"
        else
          warning "Some Homebrew packages failed to install"
        fi
        blank
      fi
    fi
  fi
fi

# Track topics/apps
installed_topics=0
failed_topics=0

# Skip topic installers if --apps flag is set
if [[ "$apps_only" != "true" ]]; then
  # Discover and run all topic installers
  for topic_dir in "$DOTFILES_ROOT"/*/; do
    topic=$(basename "$topic_dir")
    
    # Skip special directories
    [ "$topic" = "core" ] && continue
    [ "$topic" = "bin" ] && continue
    [ "$topic" = ".dotlocal" ] && continue
    [ ! -d "$topic_dir" ] && continue
    
    # Check if topic has an install.sh
    if [ -f "$topic_dir/install.sh" ]; then
      separator
      info "Installing $topic..."
      separator
      
      # Run the installer
      if (cd "$topic_dir" && bash ./install.sh); then
        success "$topic installed successfully"
        installed_topics=$((installed_topics + 1))
      else
        error "Failed to install $topic"
        failed_topics=$((failed_topics + 1))
      fi
      blank
    fi
  done
fi

# Load DOTLOCAL from dotfiles.conf if it exists
DOTLOCAL=""
if [[ -f "$DOTFILES_ROOT/dotfiles.conf" ]]; then
    # Source only variable assignments, not commands
    eval "$(grep '^[A-Z_]*=' "$DOTFILES_ROOT/dotfiles.conf" 2>/dev/null || true)"
fi

# Process local directory based on mode
if [[ -n "$DOTLOCAL" ]]; then
  # Expand tilde in DOTLOCAL path
  DOTLOCAL_EXPANDED=$(expand_path "$DOTLOCAL")
  
  if [[ "$apps_only" == "true" ]]; then
    # Process *.apps files when --apps flag is set
    if [[ -d "$DOTLOCAL_EXPANDED/homebrew" ]]; then
      info "Processing *.apps Brewfiles..."
      blank
      
      apps_found=false
      # Process both *.apps pattern and Brewfile.apps
      for apps_file in "$DOTLOCAL_EXPANDED/homebrew"/*.apps "$DOTLOCAL_EXPANDED/homebrew"/Brewfile.apps; do
        if [ -f "$apps_file" ]; then
          apps_found=true
          apps_name=$(basename "$apps_file")
          separator
          info "Installing from $apps_name..."
          separator
          
          if brew bundle --file="$apps_file"; then
            success "$apps_name installed successfully"
            installed_topics=$((installed_topics + 1))
          else
            error "Failed to install from $apps_name"
            failed_topics=$((failed_topics + 1))
          fi
          blank
        fi
      done
      
      if [[ "$apps_found" == "false" ]]; then
        warning "No *.apps or Brewfile.apps files found in $DOTLOCAL_EXPANDED/homebrew/"
        info "Create files with .apps extension (e.g., productivity.apps, development.apps) or Brewfile.apps"
      fi
    else
      warning "No homebrew directory found in $DOTLOCAL_EXPANDED"
    fi
  else
    # Regular installation mode - process topic installers
    if [[ -d "$DOTLOCAL_EXPANDED" ]]; then
      info "Processing local topic installers..."
      blank
      
      for topic_dir in "$DOTLOCAL_EXPANDED"/*/; do
        [ ! -d "$topic_dir" ] && continue
        topic=$(basename "$topic_dir")
        
        # Check if topic has an install.sh
        if [ -f "$topic_dir/install.sh" ]; then
          separator
          info "Installing local/$topic..."
          separator
          
          # Run the installer
          if (cd "$topic_dir" && bash ./install.sh); then
            success "local/$topic installed successfully"
            installed_topics=$((installed_topics + 1))
          else
            error "Failed to install local/$topic"
            failed_topics=$((failed_topics + 1))
          fi
          blank
        fi
      done
    fi
  fi
fi

# Summary
blank
separator
blank
if [[ "$apps_only" == "true" ]]; then
  subheader "Apps Installation Summary"
  info "App bundles installed: $installed_topics"
  if [ $failed_topics -gt 0 ]; then
    error "App bundles failed: $failed_topics"
    blank
    error "Some app installations failed. Please check the errors above."
    exit 1
  else
    blank
    success "All apps installed successfully!"
  fi
else
  subheader "Installation Summary"
  info "Topics installed: $installed_topics"
  if [ $failed_topics -gt 0 ]; then
    error "Topics failed: $failed_topics"
    blank
    error "Some installations failed. Please check the errors above."
    exit 1
  else
    blank
    success "All dotfiles installed successfully!"

    # Run relink to apply final configuration (including MCP servers)
    blank
    info "Applying final configuration..."
    if "$DOTFILES_ROOT/core/commands/relink"; then
      success "Configuration applied successfully!"
    else
      warning "Some configuration steps had warnings. Check above for details."
    fi
  fi
fi

# Log completion message if we created a log
if [[ -n "${LOG_FILE:-}" ]] && [[ -f "$LOG_FILE" ]]; then
  blank
  info "Installation log saved to: $LOG_FILE"
fi